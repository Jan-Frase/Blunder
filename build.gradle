import org.graalvm.buildtools.gradle.tasks.BuildNativeImageTask

plugins {
	id 'application'
	id 'java'
	id 'com.diffplug.spotless' version "7.2.1"
	id 'org.graalvm.buildtools.native' version '0.11.0'
}

group = 'de.janfrase'
version = new Date().format('yyyy-MM-dd_HH-mm')

application {
	mainClass = "de.janfrase.blunder.Main"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(24)
		vendor = JvmVendorSpec.matching("GraalVM Community")
	}
}

graalvmNative {
	toolchainDetection = true

	binaries {
		main {
			// Main native binary configuration
			imageName = 'Blunder' // Output binary name
			buildArgs.add('--verbose')
			useFatJar = true
		}
	}
}

run {
	standardInput = System.in
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.apache.logging.log4j:log4j-core:2.25.1'
	implementation 'org.apache.logging.log4j:log4j-api:2.25.1'

	testImplementation platform('org.junit:junit-bom:5.10.2')
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
	useJUnitPlatform {
		// exclude the quite long running deep perft test
		excludeTags 'Slow'
	}
	systemProperty 'junit.platform.launcher', 'org.junit.platform.launcher.core.DefaultLauncher'
}

// only runs the long perf test
tasks.register('testDeepPerft', Test) {
	group = "verification"
	useJUnitPlatform {
		includeTags 'Slow'
	}

	testClassesDirs = sourceSets.test.output.classesDirs
	classpath = sourceSets.test.runtimeClasspath

	systemProperty 'junit.platform.launcher', 'org.junit.platform.launcher.core.DefaultLauncher'
}

// register the perf test task for the perf tree script
tasks.register('runPerftTest', JavaExec) {
	group = "application"

	jvmArgs = [
			'--enable-native-access=ALL-UNNAMED',
			'-Dfile.encoding=UTF-8'
	]

	classpath = sourceSets.test.runtimeClasspath

	mainClass = 'de.janfrase.blunder.PerftRunner'
}

// the set up for spotless - largely copied from the documentation
spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	// ratchetFrom 'origin/master'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		leadingSpacesToTabs() // or leadingTabsToSpaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// don't need to set target, it is inferred from java

		// Use the default importOrder configuration
		// importOrder()

		removeUnusedImports()

		// Cleanthat will refactor your code, but it may break your style: apply it before your formatter
		cleanthat()          // has its own section below


		// apply a specific flavor of google-java-format
		googleJavaFormat('1.17.0').aosp().reflowLongStrings().skipJavadocFormatting()
		// fix formatting of type annotations
		formatAnnotations()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		licenseHeader '/* Made by Jan Frase :) */'
	}
}
